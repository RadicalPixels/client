'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _reactHexagon = require('react-hexagon');

var _reactHexagon2 = _interopRequireDefault(_reactHexagon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HexagonGrid = function (_Component) {
  _inherits(HexagonGrid, _Component);

  function HexagonGrid() {
    _classCallCheck(this, HexagonGrid);

    var _this = _possibleConstructorReturn(this, (HexagonGrid.__proto__ || Object.getPrototypeOf(HexagonGrid)).call(this));

    _this.state = {
      columns: 1,
      hexSize: 1,
      hexWidth: 1,
      hexHeight: 1
    };
    return _this;
  }

  _createClass(HexagonGrid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateDimensions(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.updateDimensions(nextProps);
    }
  }, {
    key: 'updateDimensions',
    value: function updateDimensions(props) {
      this.setState(this.getGridDimensions(props.gridWidth, props.gridHeight, props.hexagons.length));
    }
  }, {
    key: 'getGridDimensions',
    value: function getGridDimensions(gridWidth, gridHeight, N) {
      var a = 6 * gridHeight / (gridWidth * Math.sqrt(3));
      var b = gridHeight / (2 * gridWidth) - 2;

      var columns = Math.ceil((-b + Math.sqrt(b * b + 4 * N * a)) / (2 * a));

      var hexSize = Math.floor(gridWidth / (3 * columns + 0.5));

      return {
        columns: columns,
        hexSize: hexSize,
        hexWidth: hexSize * 2,
        hexHeight: Math.ceil(hexSize * Math.sqrt(3))
      };
    }
  }, {
    key: 'getHexDimensions',
    value: function getHexDimensions(row, col) {
      var dimensions = {
        width: this.state.hexWidth + 'px',
        height: this.state.hexHeight + 'px',
        x: col * this.state.hexSize * 3
      };
      if (row % 2 === 1) {
        dimensions.x += this.state.hexSize * (3 / 2);
      }
      return dimensions;
    }
  }, {
    key: 'getRowDimensions',
    value: function getRowDimensions(row) {
      var dimensions = {
        y: row * (this.state.hexSize * (Math.sqrt(3) / 2)) + 'px',
        height: this.state.hexHeight + 'px',
        width: this.props.gridWidth
      };
      if (row % 2 === 0) {
        dimensions.marginLeft = this.state.size / 2 * 3 + 'px';
      }
      return dimensions;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var iHexagon = 0;
      var rows = Math.ceil(this.props.hexagons.length / this.state.columns);
      var x = this.props.x ? this.props.x : 0;
      var y = this.props.y ? this.props.y : 0;
      return _react2.default.createElement(
        'svg',
        { width: this.props.gridWidth, height: this.props.gridHeight, x: x, y: y },
        Array.from(Array(rows).keys()).map(function (row) {
          var remaining = _this2.props.hexagons.length - iHexagon;
          var columns = remaining < _this2.state.columns ? remaining : _this2.state.columns;
          var rowDim = _this2.getRowDimensions(row);
          return _react2.default.createElement(
            'svg',
            { key: row, width: rowDim.width, height: rowDim.height, y: rowDim.y },
            Array.from(Array(columns).keys()).map(function (col) {
              var hexagon = _this2.props.hexagons[iHexagon];
              var hexDim = _this2.getHexDimensions(row, col);
              var hexProps = (0, _isFunction2.default)(_this2.props.hexProps) ? _this2.props.hexProps(hexagon) : _this2.props.hexProps;
              return _react2.default.createElement(
                'svg',
                {
                  key: iHexagon++,
                  height: hexDim.height,
                  width: hexDim.width,
                  x: hexDim.x + 'px'
                },
                _react2.default.createElement(
                  _reactHexagon2.default,
                  _extends({}, hexProps, { flatTop: true }),
                  (0, _isFunction2.default)(_this2.props.renderHexagonContent) ? _this2.props.renderHexagonContent(hexagon) : _react2.default.createElement('tspan', null)
                )
              );
            })
          );
        })
      );
    }
  }]);

  return HexagonGrid;
}(_react.Component);

HexagonGrid.propTypes = {
  gridWidth: _propTypes2.default.number.isRequired,
  gridHeight: _propTypes2.default.number.isRequired,
  hexagons: _propTypes2.default.arrayOf(_propTypes2.default.any).isRequired,
  hexProps: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),
  renderHexagonContent: _propTypes2.default.func
};

HexagonGrid.defaultProps = {
  hexProps: {},
  renderHexagonContent: null
};

exports.default = HexagonGrid;